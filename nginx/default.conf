upstream nodejs {
    server nodejs:3000;
}

server {
    listen 80 default_server;
    server_name _;

    location / {

        # proxy_pass http://nodejs;
        return 301 https://$host$request_uri;
    }

    # location /private {
    #     #//Procedimiento de Auntenticacion 
    #     auth_basic "Control de Acceso";
    #     auth_basic_user_file /etc/nginx/.htpasswd;
    #     proxy_pass http://nodejs/private;
    # }

    # location /sockjs-node {
    #     proxy_pass http://nodejs;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "Upgrade";
    # }
}

server {
    # listen 443 ssl http2 default_server;

    listen 443 ssl http2;
    # ssl on;
    server_name my-nginx;
    ssl_certificate     /etc/nginx/nginx.pem;
    ssl_certificate_key /etc/nginx/nginx.key;

    location / {
        proxy_pass http://nodejs;
        # proxy_redirect     off;
        # proxy_http_version 1.1;
        # proxy_cache_bypass $http_upgrade;
        # # proxy_set_header   Upgrade $http_upgrade;
        # # proxy_set_header   Connection keep-alive;
        # # proxy_set_header   Host $host;
        # # proxy_set_header   X-Real-IP $remote_addr;
        # # proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        # # proxy_set_header   X-Forwarded-Proto $scheme;
        # proxy_set_header   X-Forwarded-Host $server_name;
	}

        location /sockjs-node {
        proxy_pass http://nodejs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
	}

        location /private {
        #//Procedimiento de Auntenticacion 
        auth_basic "Control de Acceso";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://nodejs/private;
    }
}